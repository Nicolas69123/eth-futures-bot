"""
Module de commandes Telegram pour Bot Trading Fibonacci
S√©pare la logique des commandes du bot principal
Inclut syst√®me de monitoring et d√©tection d'anomalies
"""

import time
import subprocess
import sys
import logging
from datetime import datetime
from pathlib import Path
import threading

logger = logging.getLogger(__name__)


class TelegramCommands:
    """Gestionnaire de toutes les commandes Telegram et monitoring"""

    def __init__(self, bot):
        """
        Args:
            bot: Instance du bot principal (HedgeFibonacciBot)
        """
        self.bot = bot
        self.alerts_enabled = True
        self.is_paused = False
        self.emergency_mode = False
        self.last_anomaly_check = 0
        self.anomalies_detected = []

        # Param√®tres modifiables
        self.custom_leverage = None
        self.custom_margin = None
        self.custom_tp_pct = None

        # Thread de monitoring
        self.monitoring_thread = None
        self.monitoring_active = False

    def start_monitoring(self):
        """D√©marre le thread de monitoring des anomalies"""
        if not self.monitoring_thread or not self.monitoring_thread.is_alive():
            self.monitoring_active = True
            self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
            self.monitoring_thread.start()
            logger.info("Thread de monitoring d√©marr√©")

    def stop_monitoring(self):
        """Arr√™te le thread de monitoring"""
        self.monitoring_active = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
            logger.info("Thread de monitoring arr√™t√©")

    def _monitoring_loop(self):
        """Boucle de monitoring qui tourne toutes les secondes"""
        while self.monitoring_active:
            try:
                # V√©rifier les anomalies toutes les secondes
                self.check_for_anomalies()
                time.sleep(1)
            except Exception as e:
                logger.error(f"Erreur dans monitoring loop: {e}")
                time.sleep(5)

    def check_for_anomalies(self):
        """
        V√©rifie les anomalies dans les positions et ordres
        Appel√© toutes les secondes par le thread de monitoring
        """
        try:
            anomalies = []

            for pair, position in self.bot.active_positions.items():
                # R√©cup√©rer positions r√©elles
                real_pos = self.bot.get_real_positions(pair)
                if not real_pos:
                    continue

                # R√©cup√©rer ordres
                open_orders = self.bot.exchange.fetch_open_orders(symbol=pair)
                tpsl_orders = self.bot.get_tpsl_orders(pair)

                # V√âRIFICATION 1: Coh√©rence des marges Fibonacci
                if real_pos.get('long'):
                    long_margin = real_pos['long']['margin']
                    expected_next_margin = long_margin * 3  # Fibonacci x3

                    # Chercher l'ordre double short
                    for order in open_orders:
                        if order.get('side') == 'sell' and order.get('type') == 'limit':
                            order_value = float(order.get('amount', 0)) * float(order.get('price', 0))
                            expected_value = expected_next_margin * self.bot.LEVERAGE

                            # Si diff√©rence > 20%, c'est une anomalie
                            if abs(order_value - expected_value) / expected_value > 0.2:
                                anomalies.append({
                                    'type': 'MARGE_INCOHERENTE',
                                    'pair': pair,
                                    'side': 'long',
                                    'message': f"Marge Long: {long_margin:.2f} USDT, Ordre Double Short incorrect: {order_value:.2f} (attendu: {expected_value:.2f})"
                                })

                if real_pos.get('short'):
                    short_margin = real_pos['short']['margin']
                    expected_next_margin = short_margin * 3  # Fibonacci x3

                    # Chercher l'ordre double long
                    for order in open_orders:
                        if order.get('side') == 'buy' and order.get('type') == 'limit':
                            order_value = float(order.get('amount', 0)) * float(order.get('price', 0))
                            expected_value = expected_next_margin * self.bot.LEVERAGE

                            # Si diff√©rence > 20%, c'est une anomalie
                            if abs(order_value - expected_value) / expected_value > 0.2:
                                anomalies.append({
                                    'type': 'MARGE_INCOHERENTE',
                                    'pair': pair,
                                    'side': 'short',
                                    'message': f"Marge Short: {short_margin:.2f} USDT, Ordre Double Long incorrect: {order_value:.2f} (attendu: {expected_value:.2f})"
                                })

                # V√âRIFICATION 2: TP manquant
                if real_pos.get('long') and position.long_open:
                    tp_found = False
                    for order in tpsl_orders:
                        if order.get('planType') == 'profit_plan' and order.get('side') == 'sell_single':
                            tp_found = True
                            break

                    if not tp_found:
                        anomalies.append({
                            'type': 'TP_MANQUANT',
                            'pair': pair,
                            'side': 'long',
                            'message': f"Position Long ouverte mais TP manquant!"
                        })

                if real_pos.get('short') and position.short_open:
                    tp_found = False
                    for order in tpsl_orders:
                        if order.get('planType') == 'profit_plan' and order.get('side') == 'buy_single':
                            tp_found = True
                            break

                    if not tp_found:
                        anomalies.append({
                            'type': 'TP_MANQUANT',
                            'pair': pair,
                            'side': 'short',
                            'message': f"Position Short ouverte mais TP manquant!"
                        })

                # V√âRIFICATION 3: Ordre double manquant
                if real_pos.get('long'):
                    double_short_found = False
                    for order in open_orders:
                        if order.get('side') == 'sell' and order.get('type') == 'limit':
                            double_short_found = True
                            break

                    if not double_short_found:
                        anomalies.append({
                            'type': 'ORDRE_DOUBLE_MANQUANT',
                            'pair': pair,
                            'side': 'long',
                            'message': f"Position Long mais ordre Double Short manquant!"
                        })

                if real_pos.get('short'):
                    double_long_found = False
                    for order in open_orders:
                        if order.get('side') == 'buy' and order.get('type') == 'limit':
                            double_long_found = True
                            break

                    if not double_long_found:
                        anomalies.append({
                            'type': 'ORDRE_DOUBLE_MANQUANT',
                            'pair': pair,
                            'side': 'short',
                            'message': f"Position Short mais ordre Double Long manquant!"
                        })

                # V√âRIFICATION 4: Position fant√¥me (dans bot mais pas sur API)
                if position.long_open and not real_pos.get('long'):
                    anomalies.append({
                        'type': 'POSITION_FANTOME',
                        'pair': pair,
                        'side': 'long',
                        'message': f"Bot pense Long ouvert mais API dit non!"
                    })

                if position.short_open and not real_pos.get('short'):
                    anomalies.append({
                        'type': 'POSITION_FANTOME',
                        'pair': pair,
                        'side': 'short',
                        'message': f"Bot pense Short ouvert mais API dit non!"
                    })

            # Si nouvelles anomalies d√©tect√©es, alerter
            if anomalies and self.alerts_enabled:
                # √âviter spam - alerter seulement si diff√©rent de la derni√®re v√©rification
                if anomalies != self.anomalies_detected:
                    self.send_anomaly_alert(anomalies)
                    self.anomalies_detected = anomalies
            elif not anomalies and self.anomalies_detected:
                # Anomalies r√©solues
                self.bot.send_telegram("‚úÖ Toutes les anomalies ont √©t√© r√©solues")
                self.anomalies_detected = []

        except Exception as e:
            logger.error(f"Erreur check_for_anomalies: {e}")

    def send_anomaly_alert(self, anomalies):
        """Envoie une alerte Telegram pour les anomalies d√©tect√©es"""
        message = ["üö® <b>ANOMALIES D√âTECT√âES</b>\n"]

        for anomaly in anomalies[:5]:  # Limiter √† 5 pour √©viter spam
            message.append(f"\n‚ùå <b>{anomaly['type']}</b>")
            message.append(f"üìç {anomaly['pair'].split('/')[0]} - {anomaly['side'].upper()}")
            message.append(f"üí¨ {anomaly['message']}")

        if len(anomalies) > 5:
            message.append(f"\n... et {len(anomalies) - 5} autres anomalies")

        message.append(f"\n\n‚è∞ {datetime.now().strftime('%H:%M:%S')}")
        message.append("\nUtilisez /debug pour plus de d√©tails")

        self.bot.send_telegram("\n".join(message))

    # ========== COMMANDES TRADING ==========

    def cmd_orders(self):
        """Affiche tous les ordres limites et TP actifs"""
        try:
            message = ["üìã <b>ORDRES ACTIFS</b>\n"]
            has_orders = False

            for pair in self.bot.volatile_pairs:
                # Ordres limites
                open_orders = self.bot.exchange.fetch_open_orders(symbol=pair)
                # Ordres TP/SL
                tpsl_orders = self.bot.get_tpsl_orders(pair)

                if not open_orders and not tpsl_orders:
                    continue

                has_orders = True
                pair_name = pair.split('/')[0]
                message.append(f"\n‚îÅ‚îÅ‚îÅ‚îÅ <b>{pair_name}</b> ‚îÅ‚îÅ‚îÅ‚îÅ")

                # Ordres limites (Double)
                for order in open_orders:
                    order_type = "üîµ Double Long" if order['side'] == 'buy' else "üî¥ Double Short"
                    price = float(order.get('price', 0))
                    amount = float(order.get('amount', 0))
                    message.append(f"{order_type}: ${price:.5f} ({amount:.0f} contrats)")

                # Ordres TP
                for order in tpsl_orders:
                    if order.get('planType') == 'profit_plan':
                        tp_type = "üü¢ TP Long" if order['side'] == 'sell_single' else "üî¥ TP Short"
                        price = float(order.get('triggerPrice', 0))
                        size = float(order.get('size', 0))
                        message.append(f"{tp_type}: ${price:.5f} ({size:.0f} contrats)")

            if not has_orders:
                message.append("‚ö†Ô∏è Aucun ordre actif")

            message.append(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}")
            self.bot.send_telegram("\n".join(message))

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /orders: {e}")

    def cmd_performance(self):
        """Affiche les statistiques de performance"""
        try:
            total_trades = len(self.bot.pnl_history)
            if total_trades == 0:
                self.bot.send_telegram("üìä Aucune statistique disponible (pas de trades)")
                return

            # Calculer statistiques
            wins = [t for t in self.bot.pnl_history if t['pnl'] > 0]
            losses = [t for t in self.bot.pnl_history if t['pnl'] < 0]

            win_rate = (len(wins) / total_trades * 100) if total_trades > 0 else 0
            avg_win = sum(w['pnl'] for w in wins) / len(wins) if wins else 0
            avg_loss = sum(l['pnl'] for l in losses) / len(losses) if losses else 0

            # P&L total
            total_unrealized = 0
            for pair in self.bot.active_positions:
                real_pos = self.bot.get_real_positions(pair)
                if real_pos:
                    if real_pos.get('long'):
                        total_unrealized += real_pos['long'].get('unrealized_pnl', 0)
                    if real_pos.get('short'):
                        total_unrealized += real_pos['short'].get('unrealized_pnl', 0)

            total_fees = self.bot.get_total_fees()
            pnl_net = self.bot.total_profit + total_unrealized - total_fees

            message = f"""
üìä <b>PERFORMANCE SESSION</b>

üìà <b>Statistiques:</b>
‚Ä¢ Trades total: {total_trades}
‚Ä¢ Trades gagnants: {len(wins)}
‚Ä¢ Trades perdants: {len(losses)}
‚Ä¢ Win rate: {win_rate:.1f}%

üí∞ <b>Moyennes:</b>
‚Ä¢ Gain moyen: {avg_win:+.4f} USDT
‚Ä¢ Perte moyenne: {avg_loss:+.4f} USDT
‚Ä¢ Ratio W/L: {abs(avg_win/avg_loss):.2f} si perte

üíé <b>P&L Net:</b>
‚Ä¢ R√©alis√©: {self.bot.total_profit:+.7f} USDT
‚Ä¢ Non r√©alis√©: {total_unrealized:+.7f} USDT
‚Ä¢ Frais: -{total_fees:.7f} USDT
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>TOTAL NET: {pnl_net:+.7f} USDT</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /performance: {e}")

    def cmd_fees(self):
        """Affiche le d√©tail des frais"""
        try:
            total_fees = self.bot.get_total_fees()

            # Calculer frais par paire
            fees_by_pair = {}
            session_start_ms = int(self.bot.session_start_time.timestamp() * 1000)

            for pair in self.bot.volatile_pairs:
                trades = self.bot.exchange.fetch_my_trades(pair, since=session_start_ms, limit=500)
                pair_fees = sum(float(t.get('fee', {}).get('cost', 0)) for t in trades)
                if pair_fees > 0:
                    fees_by_pair[pair] = pair_fees

            message = ["üí∏ <b>FRAIS DE TRADING</b>\n"]

            if fees_by_pair:
                message.append("<b>Par paire:</b>")
                for pair, fees in sorted(fees_by_pair.items(), key=lambda x: x[1], reverse=True):
                    pair_name = pair.split('/')[0]
                    message.append(f"‚Ä¢ {pair_name}: {fees:.7f} USDT")

            message.append(f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            message.append(f"<b>TOTAL: {total_fees:.7f} USDT</b>")
            message.append(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}")

            self.bot.send_telegram("\n".join(message))

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /fees: {e}")

    # ========== COMMANDES PARAM√àTRES ==========

    def cmd_setleverage(self, value):
        """Change le levier"""
        try:
            leverage = int(value)
            if leverage < 1 or leverage > 125:
                self.bot.send_telegram("‚ùå Levier doit √™tre entre 1 et 125")
                return

            old_leverage = self.bot.LEVERAGE
            self.bot.LEVERAGE = leverage
            self.custom_leverage = leverage

            message = f"""
‚öôÔ∏è <b>LEVIER MODIFI√â</b>

Ancien: x{old_leverage}
Nouveau: x{leverage}

‚ö†Ô∏è Appliqu√© aux NOUVELLES positions seulement

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except ValueError:
            self.bot.send_telegram("‚ùå Usage: /setleverage <nombre>")

    def cmd_setmargin(self, value):
        """Change la marge initiale"""
        try:
            margin = float(value)
            if margin < 0.1 or margin > 100:
                self.bot.send_telegram("‚ùå Marge doit √™tre entre 0.1 et 100 USDT")
                return

            old_margin = self.bot.INITIAL_MARGIN
            self.bot.INITIAL_MARGIN = margin
            self.custom_margin = margin

            message = f"""
‚öôÔ∏è <b>MARGE MODIFI√âE</b>

Ancienne: {old_margin} USDT
Nouvelle: {margin} USDT

‚ö†Ô∏è Appliqu√© aux NOUVELLES positions seulement

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except ValueError:
            self.bot.send_telegram("‚ùå Usage: /setmargin <nombre>")

    def cmd_settpct(self, value):
        """Change le pourcentage de TP"""
        try:
            tp_pct = float(value)
            if tp_pct < 0.1 or tp_pct > 5:
                self.bot.send_telegram("‚ùå TP% doit √™tre entre 0.1 et 5")
                return

            self.custom_tp_pct = tp_pct

            message = f"""
‚öôÔ∏è <b>TP% MODIFI√â</b>

Nouveau: {tp_pct}%

‚ö†Ô∏è Appliqu√© aux NOUVEAUX ordres TP seulement

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except ValueError:
            self.bot.send_telegram("‚ùå Usage: /settpct <nombre>")

    def cmd_pause(self):
        """Met en pause l'ouverture de nouvelles positions"""
        self.is_paused = True
        message = f"""
‚è∏Ô∏è <b>BOT EN PAUSE</b>

‚Ä¢ Positions existantes: Continuent
‚Ä¢ Nouvelles positions: Bloqu√©es

Utilisez /resume pour reprendre

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        self.bot.send_telegram(message)

    def cmd_resume(self):
        """Reprend apr√®s une pause"""
        self.is_paused = False
        message = f"""
‚ñ∂Ô∏è <b>BOT REPRIS</b>

Le bot peut √† nouveau ouvrir des positions

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        self.bot.send_telegram(message)

    # ========== COMMANDES S√âCURIT√â ==========

    def cmd_emergency(self):
        """Mode urgence: ferme tout et pause"""
        try:
            self.emergency_mode = True
            self.is_paused = True

            self.bot.send_telegram("üö® <b>MODE URGENCE ACTIV√â</b>\n\nFermeture de TOUTES les positions...")

            # Fermer toutes les positions
            self.bot.cleanup_all_positions_and_orders()

            message = f"""
üö® <b>MODE URGENCE</b>

‚úÖ Toutes positions ferm√©es
‚úÖ Tous ordres annul√©s
‚è∏Ô∏è Bot en pause

Pour reprendre: /resume

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur emergency: {e}")

    def cmd_alert(self, state):
        """Active/d√©sactive les alertes"""
        if state.lower() == 'on':
            self.alerts_enabled = True
            self.bot.send_telegram("üîî Alertes activ√©es")
        elif state.lower() == 'off':
            self.alerts_enabled = False
            self.bot.send_telegram("üîï Alertes d√©sactiv√©es")
        else:
            self.bot.send_telegram("‚ùå Usage: /alert on ou /alert off")

    # ========== COMMANDES MONITORING ==========

    def cmd_stats(self):
        """Statistiques compl√®tes de la session"""
        try:
            # Dur√©e session
            session_duration = datetime.now() - self.bot.session_start_time
            hours = session_duration.total_seconds() / 3600

            # Compter positions
            total_positions = 0
            for pair in self.bot.active_positions:
                real_pos = self.bot.get_real_positions(pair)
                if real_pos:
                    if real_pos.get('long'):
                        total_positions += 1
                    if real_pos.get('short'):
                        total_positions += 1

            message = f"""
üìä <b>STATISTIQUES SESSION</b>

‚è±Ô∏è <b>Dur√©e:</b> {hours:.1f} heures
üìç <b>Positions actives:</b> {total_positions}
üíº <b>Capital utilis√©:</b> ${self.bot.capital_used:.0f}
üìà <b>Trades effectu√©s:</b> {len(self.bot.pnl_history)}

üîß <b>Param√®tres:</b>
‚Ä¢ Levier: x{self.bot.LEVERAGE}
‚Ä¢ Marge initiale: {self.bot.INITIAL_MARGIN} USDT
‚Ä¢ TP: {self.custom_tp_pct or 0.3}%

üì° <b>√âtat:</b>
‚Ä¢ Pause: {'Oui' if self.is_paused else 'Non'}
‚Ä¢ Alertes: {'Oui' if self.alerts_enabled else 'Non'}
‚Ä¢ Mode urgence: {'Oui' if self.emergency_mode else 'Non'}
‚Ä¢ Anomalies: {len(self.anomalies_detected)}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /stats: {e}")

    def cmd_logs(self):
        """Affiche les derniers logs"""
        try:
            # Utiliser le log_buffer du bot principal
            if not hasattr(self.bot, 'log_buffer') or not self.bot.log_buffer:
                self.bot.send_telegram("üìú Aucun log disponible")
                return

            recent_logs = list(self.bot.log_buffer)[-30:]
            logs_text = "\n".join(recent_logs)

            if len(logs_text) > 3500:
                logs_text = logs_text[-3500:]
                logs_text = "...\n" + logs_text

            message = f"""
üìú <b>DERNIERS LOGS</b>

<pre>{logs_text}</pre>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            self.bot.send_telegram(message)

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /logs: {e}")

    def cmd_debug(self):
        """Affiche les informations de debug et anomalies"""
        try:
            message = ["üîç <b>DEBUG - √âTAT D√âTAILL√â</b>\n"]

            # Anomalies actuelles
            if self.anomalies_detected:
                message.append("üö® <b>ANOMALIES ACTUELLES:</b>")
                for anomaly in self.anomalies_detected:
                    message.append(f"\n‚Ä¢ {anomaly['type']}")
                    message.append(f"  {anomaly['pair']} - {anomaly['side']}")
                    message.append(f"  {anomaly['message']}")
            else:
                message.append("‚úÖ Aucune anomalie d√©tect√©e")

            message.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            message.append("\n<b>√âTAT PAR POSITION:</b>")

            for pair, position in self.bot.active_positions.items():
                pair_name = pair.split('/')[0]
                message.append(f"\n<b>{pair_name}:</b>")

                # √âtat interne
                message.append(f"‚Ä¢ Bot Long: {'Oui' if position.long_open else 'Non'}")
                message.append(f"‚Ä¢ Bot Short: {'Oui' if position.short_open else 'Non'}")
                message.append(f"‚Ä¢ Fib Long: {position.long_fib_level}")
                message.append(f"‚Ä¢ Fib Short: {position.short_fib_level}")

                # √âtat API
                real_pos = self.bot.get_real_positions(pair)
                if real_pos:
                    message.append(f"‚Ä¢ API Long: {'Oui' if real_pos.get('long') else 'Non'}")
                    message.append(f"‚Ä¢ API Short: {'Oui' if real_pos.get('short') else 'Non'}")

                # Ordres
                open_orders = self.bot.exchange.fetch_open_orders(symbol=pair)
                tpsl_orders = self.bot.get_tpsl_orders(pair)
                message.append(f"‚Ä¢ Ordres limites: {len(open_orders)}")
                message.append(f"‚Ä¢ Ordres TP/SL: {len(tpsl_orders)}")

            message.append(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}")
            self.bot.send_telegram("\n".join(message))

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /debug: {e}")

    # ========== COMMANDES SYST√àME ==========

    def cmd_help(self):
        """Affiche l'aide des commandes"""
        message = """
ü§ñ <b>COMMANDES BOT TRADING</b>

üìä <b>Trading:</b>
/orders - Tous les ordres actifs
/performance - Statistiques de performance
/fees - D√©tail des frais

‚öôÔ∏è <b>Param√®tres:</b>
/setleverage <X> - Changer levier (1-125)
/setmargin <X> - Marge initiale (0.1-100)
/settpct <X> - TP en % (0.1-5)
/pause - Pause nouvelles positions
/resume - Reprendre apr√®s pause

üõ°Ô∏è <b>S√©curit√©:</b>
/emergency - Fermer tout + pause
/alert on/off - Activer/d√©sactiver alertes

üìà <b>Monitoring:</b>
/stats - Statistiques session
/logs - Derniers logs
/debug - Infos debug + anomalies

üîß <b>Syst√®me:</b>
/update - Mise √† jour + restart
/restart - Red√©marrer bot
/stop - Arr√™ter bot
/help - Cette aide
"""
        self.bot.send_telegram(message)

    def cmd_update(self):
        """Met √† jour depuis GitHub et red√©marre"""
        logger.info("Commande /update re√ßue")
        self.bot.send_telegram("üîÑ <b>MISE √Ä JOUR...</b>\n\n‚ö†Ô∏è Le bot va red√©marrer.\n\nPatientez 20 secondes.")

        try:
            # IMPORTANT: Sauvegarder l'ID AVANT de quitter pour √©viter la boucle
            self.bot.save_last_update_id()
            logger.info("last_telegram_update_id sauvegard√© avant update")

            manage_script = Path(__file__).parent.parent / 'manage_local.sh'

            if not manage_script.exists():
                self.bot.send_telegram("‚ùå Script manage_local.sh introuvable!")
                return

            subprocess.Popen(['bash', str(manage_script), 'update'],
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL,
                           start_new_session=True)

            time.sleep(1)  # Petite attente pour que le message parte
            sys.exit(0)

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /update: {e}")

    def cmd_restart(self):
        """Red√©marre le bot"""
        logger.info("Commande /restart re√ßue")
        self.bot.send_telegram("‚ôªÔ∏è <b>RED√âMARRAGE...</b>\n\n‚ö†Ô∏è Le bot va red√©marrer.\n\nPatientez 20 secondes.")

        try:
            # IMPORTANT: Sauvegarder l'ID AVANT de quitter pour √©viter la boucle
            self.bot.save_last_update_id()
            logger.info("last_telegram_update_id sauvegard√© avant restart")

            manage_script = Path(__file__).parent.parent / 'manage_local.sh'

            if not manage_script.exists():
                self.bot.send_telegram("‚ùå Script manage_local.sh introuvable!")
                return

            subprocess.Popen(['bash', str(manage_script), 'restart'],
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL,
                           start_new_session=True)

            time.sleep(1)  # Petite attente pour que le message parte
            sys.exit(0)

        except Exception as e:
            self.bot.send_telegram(f"‚ùå Erreur /restart: {e}")

    def cmd_stop(self, confirm=False):
        """Arr√™te le bot"""
        if not confirm:
            message = """
‚ö†Ô∏è <b>CONFIRMATION REQUISE</b>

Pour confirmer l'arr√™t, envoyez:
/stop CONFIRM
"""
            self.bot.send_telegram(message)
        else:
            self.bot.send_telegram("‚èπÔ∏è <b>ARR√äT DU BOT...</b>\n\nFermeture des positions...")
            self.bot.cleanup_all_positions_and_orders()
            self.bot.send_telegram("üõë Bot arr√™t√©.")
            time.sleep(2)
            sys.exit(0)

    def process_command(self, command):
        """
        Point d'entr√©e principal pour traiter les commandes

        Args:
            command: La commande Telegram re√ßue (ex: "/help", "/setleverage 50")
        """
        try:
            parts = command.split(maxsplit=1)
            cmd = parts[0].lower()
            args = parts[1] if len(parts) > 1 else None

            # Commandes Trading
            if cmd == '/orders':
                self.cmd_orders()
            elif cmd == '/performance':
                self.cmd_performance()
            elif cmd == '/fees':
                self.cmd_fees()

            # Commandes Param√®tres
            elif cmd == '/setleverage' and args:
                self.cmd_setleverage(args)
            elif cmd == '/setmargin' and args:
                self.cmd_setmargin(args)
            elif cmd == '/settpct' and args:
                self.cmd_settpct(args)
            elif cmd == '/pause':
                self.cmd_pause()
            elif cmd == '/resume':
                self.cmd_resume()

            # Commandes S√©curit√©
            elif cmd == '/emergency':
                self.cmd_emergency()
            elif cmd == '/alert' and args:
                self.cmd_alert(args)

            # Commandes Monitoring
            elif cmd == '/stats':
                self.cmd_stats()
            elif cmd == '/logs':
                self.cmd_logs()
            elif cmd == '/debug':
                self.cmd_debug()

            # Commandes Syst√®me
            elif cmd == '/help':
                self.cmd_help()
            elif cmd == '/update':
                self.cmd_update()
            elif cmd == '/restart':
                self.cmd_restart()
            elif cmd == '/stop':
                if args == 'CONFIRM':
                    self.cmd_stop(confirm=True)
                else:
                    self.cmd_stop(confirm=False)

            else:
                self.bot.send_telegram(f"‚ùå Commande inconnue: {cmd}\n\nTapez /help pour l'aide")

        except Exception as e:
            logger.error(f"Erreur traitement commande {command}: {e}")
            self.bot.send_telegram(f"‚ùå Erreur: {e}")