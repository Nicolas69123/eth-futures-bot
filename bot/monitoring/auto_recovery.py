"""
Syst√®me d'auto-recovery pour d√©tecter et corriger les probl√®mes automatiquement
"""

import logging
import time

logger = logging.getLogger('trading_bot')


class AutoRecovery:
    """
    Syst√®me d'auto-correction qui tourne en arri√®re-plan
    V√©rifie et corrige automatiquement les probl√®mes d'ordres
    """

    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.last_check = time.time()
        self.check_interval = 30  # V√©rifier toutes les 30 secondes
        self.recovery_count = 0

    def run_check(self):
        """
        Ex√©cute les v√©rifications et corrections
        Appel√© depuis la boucle principale
        """
        current_time = time.time()

        if current_time - self.last_check < self.check_interval:
            return

        self.last_check = current_time

        try:
            logger.info("=== AUTO-RECOVERY: D√©marrage ===")
            corrections = []

            # V√©rifier chaque position active
            for pair, position in list(self.bot.active_positions.items()):
                try:
                    pair_corrections = self.check_position_orders(pair, position)
                    if pair_corrections:
                        corrections.extend(pair_corrections)
                except Exception as e:
                    logger.error(f"Erreur v√©rification {pair}: {e}")

            if corrections:
                self.recovery_count += len(corrections)
                logger.info(f"‚úÖ AUTO-RECOVERY: {len(corrections)} corrections effectu√©es")
                logger.info(f"Corrections: {corrections}")

                # Notifier sur Telegram si beaucoup de corrections
                if len(corrections) >= 3:
                    self.bot.send_telegram(f"üîß <b>Auto-Recovery</b>\n\n{len(corrections)} corrections effectu√©es:\n" + "\n".join(corrections[:5]))

            logger.info("=== AUTO-RECOVERY: Termin√© ===")

        except Exception as e:
            logger.error(f"Erreur g√©n√©rale auto-recovery: {e}")

    def check_position_orders(self, pair, position):
        """
        V√©rifie qu'une position a tous ses ordres n√©cessaires
        Retourne liste des corrections effectu√©es
        """
        corrections = []

        try:
            real_pos = self.bot.get_real_positions(pair)
            if not real_pos:
                return corrections

            # V√âRIFIER TP LONG MANQUANT
            if real_pos.get('long') and not position.orders.get('tp_long'):
                logger.warning(f"‚ö†Ô∏è TP Long manquant sur {pair}")
                corrections.append(f"TP Long manquant sur {pair.split('/')[0]}")
                # TODO: Replacer TP Long
                # self.replace_tp_long(pair, position, real_pos['long'])

            # V√âRIFIER TP SHORT MANQUANT
            if real_pos.get('short') and not position.orders.get('tp_short'):
                logger.warning(f"‚ö†Ô∏è TP Short manquant sur {pair}")
                corrections.append(f"TP Short manquant sur {pair.split('/')[0]}")
                # TODO: Replacer TP Short
                # self.replace_tp_short(pair, position, real_pos['short'])

            # SYNC √âTAT POSITIONS
            # Si API dit Long ferm√© mais bot pense ouvert
            if not real_pos.get('long') and position.long_open:
                logger.info(f"Sync: Long ferm√© sur {pair}")
                position.long_open = False
                corrections.append(f"Sync Long ferm√© {pair.split('/')[0]}")

            if not real_pos.get('short') and position.short_open:
                logger.info(f"Sync: Short ferm√© sur {pair}")
                position.short_open = False
                corrections.append(f"Sync Short ferm√© {pair.split('/')[0]}")

            # Si API dit Long ouvert mais bot pense ferm√©
            if real_pos.get('long') and not position.long_open:
                logger.info(f"Sync: Long ouvert sur {pair}")
                position.long_open = True
                position.entry_price_long = real_pos['long']['entry_price']
                corrections.append(f"Sync Long ouvert {pair.split('/')[0]}")

            if real_pos.get('short') and not position.short_open:
                logger.info(f"Sync: Short ouvert sur {pair}")
                position.short_open = True
                position.entry_price_short = real_pos['short']['entry_price']
                corrections.append(f"Sync Short ouvert {pair.split('/')[0]}")

        except Exception as e:
            logger.error(f"Erreur check_position_orders {pair}: {e}")

        return corrections

    def replace_tp_long(self, pair, position, long_data):
        """Replace un TP Long manquant (TODO)"""
        pass

    def replace_tp_short(self, pair, position, short_data):
        """Replace un TP Short manquant (TODO)"""
        pass
